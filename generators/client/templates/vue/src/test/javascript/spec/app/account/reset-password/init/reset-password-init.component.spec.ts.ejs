import { createLocalVue, shallowMount, Wrapper } from '@vue/test-utils';
import axios from 'axios';
import sinon from 'sinon';

import * as config from '@/shared/config/config';
import ResetPasswordInit from '@/account/reset-password/init/reset-password-init.vue';
import ResetPasswordInitClass from '@/account/reset-password/init/reset-password-init.component';
import { EMAIL_NOT_FOUND_TYPE } from '@/constants';

const localVue = createLocalVue();

config.initVueApp(localVue);
<%_ if (enableTranslation) { _%>
const i18n = config.initI18N(localVue);
<%_ } _%>

describe('Reset Component Init', () => {
    let wrapper: Wrapper<ResetPasswordInitClass>;
    let resetPasswordInit: ResetPasswordInitClass;

    beforeEach(() => {
        wrapper = shallowMount<ResetPasswordInitClass>(ResetPasswordInit, {
            <%_ if (enableTranslation) { _%>
            i18n,
            <%_ } _%>
            localVue,
        });
        resetPasswordInit = wrapper.vm;
    });

    it('should be a Vue instance', () => {
        expect(wrapper.isVueInstance()).toBeTruthy();
    });

    it('should reset request be a success', async () => {
        // Given
        axios.post = sinon.stub().returns(Promise.resolve());

        // When
        await resetPasswordInit.requestReset();

        // Then
        expect(resetPasswordInit.success).toBeTruthy();
    });

    it('should reset request fail as an error', async () => {
        // Given
        axios.post = sinon.stub().returns(Promise.reject({
            response: {
                status: null,
                data: {
                    type: null
                }
            }
        }));

        // When
        resetPasswordInit.requestReset();
        await resetPasswordInit.$nextTick();

        // Then
        expect(resetPasswordInit.success).toBeNull();
        expect(resetPasswordInit.error).toEqual('ERROR');
    });

    it('should reset request fail as an email not existing error', async () => {
        // Given
        axios.post = sinon.stub().returns(Promise.reject({
            response: {
                status: 400,
                data: {
                    type: EMAIL_NOT_FOUND_TYPE
                }
            }
        }));

        // When
        resetPasswordInit.requestReset();
        await resetPasswordInit.$nextTick();

        // Then
        expect(resetPasswordInit.success).toBeNull();
        expect(resetPasswordInit.errorEmailNotExists).toEqual('ERROR');
    });
});
