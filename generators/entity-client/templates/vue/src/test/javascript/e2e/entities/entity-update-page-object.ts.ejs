<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import { element, by, ElementFinder, protractor, browser } from 'protractor';
import { clearElement, waitUntilDisplayed } from '../../<%= entityParentPathAddition %>util/utils';

<%_
let elementGetter = `getText()`;
let openBlockComment = ``;
let closeBlockComment = ``;
if (enableTranslation) {
    elementGetter = `getAttribute('jhiTranslate')`;
}
for (let relationship of relationships) {
    if (relationship.relationshipRequired) {
        openBlockComment = `/*`;
        closeBlockComment = `*/`;
        break;
    }
} _%>
export default class <%= entityClass %>UpdatePage {
    getPageTitle() {
        return element(by.id('<%= i18nKeyPrefix %>.home.createOrEditLabel'));
    }

    getFooter() {
        return element(by.id('footer'));
    }

    getSaveButton() {
        return element(by.id('save-entity'));
    }

    async isSaveButtonPresent() {
        return await this.getSaveButton().isPresent();
    }

    async save() {
        await this.getSaveButton().click();
    }

    async cancel() {
        await element(by.id('cancel-save')).click();
    }

    <%_ fields.forEach((field) => {
            const fieldName = field.fieldName;
            const fieldNameCapitalized = field.fieldNameCapitalized;
            const fieldNameHumanized = field.fieldNameHumanized;
            const fieldType = field.fieldType;
            const fieldTypeBlobContent = field.fieldTypeBlobContent;
            const fieldIsEnum = field.fieldIsEnum;
            let fieldInputType = 'text';
            let ngModelOption = '';
    _%>
    //--------------------------------------------------

    <%_ if (fieldType === 'Boolean') { _%>
    get<%= fieldNameCapitalized %>Input() {
        return element(by.css('input#<%= entityFileName %>-<%= fieldName %>'));
    }

    async click<%= fieldNameCapitalized %>Input() {
        await this.get<%= fieldNameCapitalized %>Input().click();
    }

    async isSelected<%= fieldNameCapitalized %>Input() {
        return await this.get<%= fieldNameCapitalized %>Input().isSelected();
    }

    <%_ } else if (fieldIsEnum) { _%>
    async set<%= fieldNameCapitalized %>Select(<%= fieldName %>) {
        const elem = element(by.css('select#<%= entityFileName %>-<%= fieldName %>'))
        await elem.sendKeys(<%= fieldName %>);
    }

    async get<%= fieldNameCapitalized %>Select() {
        const elem = element(by.css('select#<%= entityFileName %>-<%= fieldName %>'))
        const elemChecked = elem.element(by.css('option:checked'));
        return await elemChecked.getText();
    }

    async <%=fieldName %>SelectLastOption() {
        const elem = element(by.css('select#<%= entityFileName %>-<%= fieldName %>'))
        await elem.all(by.tagName('option')).last().click();
    }

    <%_ } else { _%>
    find<%= fieldNameCapitalized %>Input() {
        <%_ if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent === 'text') { _%>
        return element(by.css('textarea#<%= entityFileName %>-<%= fieldName %>'));
        <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType)) { _%>
        return element(by.css('input#file_<%= fieldName %>'));
        <%_ } else { _%>
        return element(by.css('input#<%= entityFileName %>-<%= fieldName %>'));
        <%_ } _%>
    }

    async set<%= fieldNameCapitalized %>Input(<%= fieldName %>) {
        const elementInput = this.find<%= fieldNameCapitalized %>Input();
        await waitUntilDisplayed(elementInput);
        await elementInput.sendKeys(<%= fieldName %>);
    }

    async get<%= fieldNameCapitalized %>Input() {
        const elementInput = this.find<%= fieldNameCapitalized %>Input();
        return await elementInput.getAttribute('value');
    }

    async clear<%= fieldNameCapitalized %>Input() {
        const elementInput = this.find<%= fieldNameCapitalized %>Input();
        await clearElement(elementInput, 100);
    }

    <%_ } _%>
    <%_ }); _%>
    <%_ relationships.forEach((relationship) => {
        const relationshipType = relationship.relationshipType;
        const ownerSide = relationship.ownerSide;
        const relationshipName = relationship.relationshipName;
        const relationshipFieldName = relationship.relationshipFieldName;
        const relationshipNameCapitalized = relationship.relationshipNameCapitalized; _%>
    <%_ if (relationshipType === 'many-to-one' || (relationshipType === 'many-to-many' && ownerSide === true) || (relationshipType === 'one-to-one' && ownerSide === true)) { _%>
    //--------------------------------------------------

    get<%=relationshipNameCapitalized %>Select() {
        return element(by.css('select#<%= entityFileName %>-<%= relationshipName %>'));
    }

    async get<%=relationshipNameCapitalized %>SelectLastOption() {
        const elem = this.get<%=relationshipNameCapitalized %>Select();
        await elem.all(by.tagName('option')).last().click();
    }

    async get<%=relationshipNameCapitalized %>SelectOption(option) {
        const elem = this.get<%=relationshipNameCapitalized %>Select();
        await elem.sendKeys(option);
    }

    async get<%=relationshipNameCapitalized %>SelectedOption() {
        const elem = this.get<%=relationshipNameCapitalized %>Select();
        return await elem.element(by.css('option:checked')).getText();
    }

    <%_ } _%>
    <%_ }); _%>
}
